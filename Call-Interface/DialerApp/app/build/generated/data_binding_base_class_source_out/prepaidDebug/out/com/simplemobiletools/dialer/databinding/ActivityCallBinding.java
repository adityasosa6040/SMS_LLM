// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.dialer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.commons.views.MyEditText;
import com.simplemobiletools.commons.views.MyTextView;
import com.simplemobiletools.dialer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCallBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView callAccept;

  @NonNull
  public final MyTextView callAcceptLabel;

  @NonNull
  public final ImageView callAdd;

  @NonNull
  public final Barrier callControlGridBarrier;

  @NonNull
  public final ImageView callDecline;

  @NonNull
  public final MyTextView callDeclineLabel;

  @NonNull
  public final ImageView callDialpad;

  @NonNull
  public final ImageView callDraggable;

  @NonNull
  public final ImageView callDraggableBackground;

  @NonNull
  public final ImageView callEnd;

  @NonNull
  public final ConstraintLayout callHolder;

  @NonNull
  public final ImageView callLeftArrow;

  @NonNull
  public final ImageView callManage;

  @NonNull
  public final ImageView callMerge;

  @NonNull
  public final ImageView callRightArrow;

  @NonNull
  public final TextView callSimId;

  @NonNull
  public final ImageView callSimImage;

  @NonNull
  public final MyTextView callStatusLabel;

  @NonNull
  public final ImageView callSwap;

  @NonNull
  public final ImageView callToggleHold;

  @NonNull
  public final ImageView callToggleMicrophone;

  @NonNull
  public final ImageView callToggleSpeaker;

  @NonNull
  public final ImageView callerAvatar;

  @NonNull
  public final MyTextView callerNameLabel;

  @NonNull
  public final MyTextView callerNumber;

  @NonNull
  public final Group controlsSingleCall;

  @NonNull
  public final Group controlsTwoCalls;

  @NonNull
  public final ImageView dialpadClose;

  @NonNull
  public final DialpadBinding dialpadInclude;

  @NonNull
  public final MyEditText dialpadInput;

  @NonNull
  public final RelativeLayout dialpadInputHolder;

  @NonNull
  public final LinearLayout dialpadWrapper;

  @NonNull
  public final TextView holdStatusLabel;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final ConstraintLayout incomingCallHolder;

  @NonNull
  public final MyTextView onHoldCallerName;

  @NonNull
  public final MyTextView onHoldLabel;

  @NonNull
  public final ConstraintLayout onHoldStatusHolder;

  @NonNull
  public final ConstraintLayout ongoingCallHolder;

  private ActivityCallBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView callAccept,
      @NonNull MyTextView callAcceptLabel, @NonNull ImageView callAdd,
      @NonNull Barrier callControlGridBarrier, @NonNull ImageView callDecline,
      @NonNull MyTextView callDeclineLabel, @NonNull ImageView callDialpad,
      @NonNull ImageView callDraggable, @NonNull ImageView callDraggableBackground,
      @NonNull ImageView callEnd, @NonNull ConstraintLayout callHolder,
      @NonNull ImageView callLeftArrow, @NonNull ImageView callManage, @NonNull ImageView callMerge,
      @NonNull ImageView callRightArrow, @NonNull TextView callSimId,
      @NonNull ImageView callSimImage, @NonNull MyTextView callStatusLabel,
      @NonNull ImageView callSwap, @NonNull ImageView callToggleHold,
      @NonNull ImageView callToggleMicrophone, @NonNull ImageView callToggleSpeaker,
      @NonNull ImageView callerAvatar, @NonNull MyTextView callerNameLabel,
      @NonNull MyTextView callerNumber, @NonNull Group controlsSingleCall,
      @NonNull Group controlsTwoCalls, @NonNull ImageView dialpadClose,
      @NonNull DialpadBinding dialpadInclude, @NonNull MyEditText dialpadInput,
      @NonNull RelativeLayout dialpadInputHolder, @NonNull LinearLayout dialpadWrapper,
      @NonNull TextView holdStatusLabel, @NonNull ImageView imageView,
      @NonNull ConstraintLayout incomingCallHolder, @NonNull MyTextView onHoldCallerName,
      @NonNull MyTextView onHoldLabel, @NonNull ConstraintLayout onHoldStatusHolder,
      @NonNull ConstraintLayout ongoingCallHolder) {
    this.rootView = rootView;
    this.callAccept = callAccept;
    this.callAcceptLabel = callAcceptLabel;
    this.callAdd = callAdd;
    this.callControlGridBarrier = callControlGridBarrier;
    this.callDecline = callDecline;
    this.callDeclineLabel = callDeclineLabel;
    this.callDialpad = callDialpad;
    this.callDraggable = callDraggable;
    this.callDraggableBackground = callDraggableBackground;
    this.callEnd = callEnd;
    this.callHolder = callHolder;
    this.callLeftArrow = callLeftArrow;
    this.callManage = callManage;
    this.callMerge = callMerge;
    this.callRightArrow = callRightArrow;
    this.callSimId = callSimId;
    this.callSimImage = callSimImage;
    this.callStatusLabel = callStatusLabel;
    this.callSwap = callSwap;
    this.callToggleHold = callToggleHold;
    this.callToggleMicrophone = callToggleMicrophone;
    this.callToggleSpeaker = callToggleSpeaker;
    this.callerAvatar = callerAvatar;
    this.callerNameLabel = callerNameLabel;
    this.callerNumber = callerNumber;
    this.controlsSingleCall = controlsSingleCall;
    this.controlsTwoCalls = controlsTwoCalls;
    this.dialpadClose = dialpadClose;
    this.dialpadInclude = dialpadInclude;
    this.dialpadInput = dialpadInput;
    this.dialpadInputHolder = dialpadInputHolder;
    this.dialpadWrapper = dialpadWrapper;
    this.holdStatusLabel = holdStatusLabel;
    this.imageView = imageView;
    this.incomingCallHolder = incomingCallHolder;
    this.onHoldCallerName = onHoldCallerName;
    this.onHoldLabel = onHoldLabel;
    this.onHoldStatusHolder = onHoldStatusHolder;
    this.ongoingCallHolder = ongoingCallHolder;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCallBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCallBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_call, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCallBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.call_accept;
      ImageView callAccept = ViewBindings.findChildViewById(rootView, id);
      if (callAccept == null) {
        break missingId;
      }

      id = R.id.call_accept_label;
      MyTextView callAcceptLabel = ViewBindings.findChildViewById(rootView, id);
      if (callAcceptLabel == null) {
        break missingId;
      }

      id = R.id.call_add;
      ImageView callAdd = ViewBindings.findChildViewById(rootView, id);
      if (callAdd == null) {
        break missingId;
      }

      id = R.id.call_control_grid_barrier;
      Barrier callControlGridBarrier = ViewBindings.findChildViewById(rootView, id);
      if (callControlGridBarrier == null) {
        break missingId;
      }

      id = R.id.call_decline;
      ImageView callDecline = ViewBindings.findChildViewById(rootView, id);
      if (callDecline == null) {
        break missingId;
      }

      id = R.id.call_decline_label;
      MyTextView callDeclineLabel = ViewBindings.findChildViewById(rootView, id);
      if (callDeclineLabel == null) {
        break missingId;
      }

      id = R.id.call_dialpad;
      ImageView callDialpad = ViewBindings.findChildViewById(rootView, id);
      if (callDialpad == null) {
        break missingId;
      }

      id = R.id.call_draggable;
      ImageView callDraggable = ViewBindings.findChildViewById(rootView, id);
      if (callDraggable == null) {
        break missingId;
      }

      id = R.id.call_draggable_background;
      ImageView callDraggableBackground = ViewBindings.findChildViewById(rootView, id);
      if (callDraggableBackground == null) {
        break missingId;
      }

      id = R.id.call_end;
      ImageView callEnd = ViewBindings.findChildViewById(rootView, id);
      if (callEnd == null) {
        break missingId;
      }

      ConstraintLayout callHolder = (ConstraintLayout) rootView;

      id = R.id.call_left_arrow;
      ImageView callLeftArrow = ViewBindings.findChildViewById(rootView, id);
      if (callLeftArrow == null) {
        break missingId;
      }

      id = R.id.call_manage;
      ImageView callManage = ViewBindings.findChildViewById(rootView, id);
      if (callManage == null) {
        break missingId;
      }

      id = R.id.call_merge;
      ImageView callMerge = ViewBindings.findChildViewById(rootView, id);
      if (callMerge == null) {
        break missingId;
      }

      id = R.id.call_right_arrow;
      ImageView callRightArrow = ViewBindings.findChildViewById(rootView, id);
      if (callRightArrow == null) {
        break missingId;
      }

      id = R.id.call_sim_id;
      TextView callSimId = ViewBindings.findChildViewById(rootView, id);
      if (callSimId == null) {
        break missingId;
      }

      id = R.id.call_sim_image;
      ImageView callSimImage = ViewBindings.findChildViewById(rootView, id);
      if (callSimImage == null) {
        break missingId;
      }

      id = R.id.call_status_label;
      MyTextView callStatusLabel = ViewBindings.findChildViewById(rootView, id);
      if (callStatusLabel == null) {
        break missingId;
      }

      id = R.id.call_swap;
      ImageView callSwap = ViewBindings.findChildViewById(rootView, id);
      if (callSwap == null) {
        break missingId;
      }

      id = R.id.call_toggle_hold;
      ImageView callToggleHold = ViewBindings.findChildViewById(rootView, id);
      if (callToggleHold == null) {
        break missingId;
      }

      id = R.id.call_toggle_microphone;
      ImageView callToggleMicrophone = ViewBindings.findChildViewById(rootView, id);
      if (callToggleMicrophone == null) {
        break missingId;
      }

      id = R.id.call_toggle_speaker;
      ImageView callToggleSpeaker = ViewBindings.findChildViewById(rootView, id);
      if (callToggleSpeaker == null) {
        break missingId;
      }

      id = R.id.caller_avatar;
      ImageView callerAvatar = ViewBindings.findChildViewById(rootView, id);
      if (callerAvatar == null) {
        break missingId;
      }

      id = R.id.caller_name_label;
      MyTextView callerNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (callerNameLabel == null) {
        break missingId;
      }

      id = R.id.caller_number;
      MyTextView callerNumber = ViewBindings.findChildViewById(rootView, id);
      if (callerNumber == null) {
        break missingId;
      }

      id = R.id.controls_single_call;
      Group controlsSingleCall = ViewBindings.findChildViewById(rootView, id);
      if (controlsSingleCall == null) {
        break missingId;
      }

      id = R.id.controls_two_calls;
      Group controlsTwoCalls = ViewBindings.findChildViewById(rootView, id);
      if (controlsTwoCalls == null) {
        break missingId;
      }

      id = R.id.dialpad_close;
      ImageView dialpadClose = ViewBindings.findChildViewById(rootView, id);
      if (dialpadClose == null) {
        break missingId;
      }

      id = R.id.dialpad_include;
      View dialpadInclude = ViewBindings.findChildViewById(rootView, id);
      if (dialpadInclude == null) {
        break missingId;
      }
      DialpadBinding binding_dialpadInclude = DialpadBinding.bind(dialpadInclude);

      id = R.id.dialpad_input;
      MyEditText dialpadInput = ViewBindings.findChildViewById(rootView, id);
      if (dialpadInput == null) {
        break missingId;
      }

      id = R.id.dialpad_input_holder;
      RelativeLayout dialpadInputHolder = ViewBindings.findChildViewById(rootView, id);
      if (dialpadInputHolder == null) {
        break missingId;
      }

      id = R.id.dialpad_wrapper;
      LinearLayout dialpadWrapper = ViewBindings.findChildViewById(rootView, id);
      if (dialpadWrapper == null) {
        break missingId;
      }

      id = R.id.hold_status_label;
      TextView holdStatusLabel = ViewBindings.findChildViewById(rootView, id);
      if (holdStatusLabel == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.incoming_call_holder;
      ConstraintLayout incomingCallHolder = ViewBindings.findChildViewById(rootView, id);
      if (incomingCallHolder == null) {
        break missingId;
      }

      id = R.id.on_hold_caller_name;
      MyTextView onHoldCallerName = ViewBindings.findChildViewById(rootView, id);
      if (onHoldCallerName == null) {
        break missingId;
      }

      id = R.id.on_hold_label;
      MyTextView onHoldLabel = ViewBindings.findChildViewById(rootView, id);
      if (onHoldLabel == null) {
        break missingId;
      }

      id = R.id.on_hold_status_holder;
      ConstraintLayout onHoldStatusHolder = ViewBindings.findChildViewById(rootView, id);
      if (onHoldStatusHolder == null) {
        break missingId;
      }

      id = R.id.ongoing_call_holder;
      ConstraintLayout ongoingCallHolder = ViewBindings.findChildViewById(rootView, id);
      if (ongoingCallHolder == null) {
        break missingId;
      }

      return new ActivityCallBinding((ConstraintLayout) rootView, callAccept, callAcceptLabel,
          callAdd, callControlGridBarrier, callDecline, callDeclineLabel, callDialpad,
          callDraggable, callDraggableBackground, callEnd, callHolder, callLeftArrow, callManage,
          callMerge, callRightArrow, callSimId, callSimImage, callStatusLabel, callSwap,
          callToggleHold, callToggleMicrophone, callToggleSpeaker, callerAvatar, callerNameLabel,
          callerNumber, controlsSingleCall, controlsTwoCalls, dialpadClose, binding_dialpadInclude,
          dialpadInput, dialpadInputHolder, dialpadWrapper, holdStatusLabel, imageView,
          incomingCallHolder, onHoldCallerName, onHoldLabel, onHoldStatusHolder, ongoingCallHolder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
